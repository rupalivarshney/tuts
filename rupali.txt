#include<stdlib.h>
#include<stdio.h>
#include<conio.h>
#include<graphics.h>
#include<dos.h>

int button();
void towerHanoi(int n,int *stk[],int top[],int a,int b,int c);
void update(int *stk[],int top[]);
int initmouse();
void showmouse();
void setmousepos(int x,int y);
void getmousepos(int *x,int *y,int *cl);
void hidemouse();
union REGS in,out;

int main()
{
	int n;
	int gd=DETECT,gm;
	int **stk;
	int *top = (int *)malloc(sizeof(int)*3);
	int i,temp=0,x,y,cl,error;
	int k;
	char str[30];
	clrscr();
	printf("Enter Disk no : ");
	scanf("%d",&n);
	printf("Wait For A Moment Program is initializing...");

	stk=(int **)malloc(sizeof(int *)*n);

	for(i=0;i<n;i++)
	stk[i]=(int *)malloc(sizeof(int)*3);

	for(i=0;i<3;i++)
	top[i]=-1;

	delay(3000);

	if(n==0)
	{    
		//checking whether input are correct or not
		printf("\nFailed Initialization...");
		getch();
		return 0;
	}

  //if input is correct program will start
	for(i=n+2;i>=3;i--)
	{
		++top[0];
		stk[top[0]][0]=i*10;
	}

	initgraph(&gd,&gm,"C:\\tc3\\bgi");
	error = graphresult();
	if(error != grOk)
	{
		printf("occured error in opening is : %s",grapherrormsg(error));
		getch();
		exit(1);
	}
	k=button();  //selection of method by user

	if(k==1)
	{                          //computer method
		update(stk,top);
		delay(3000);
		towerHanoi(n,stk,top,0,1,2);
		outtext("Process Done!!  PRESS ANY TO EXIT");
		getch();
		closegraph();
		return 1;
	}
    //manual method
	else
	{
		update(stk,top);
		showmouse();
		while(!kbhit() && (top[0] != -1 ||top[1] != -1 || top[2]!=n-1))
		{
			getmousepos(&x,&y,&cl);
			if(cl==1)
			{
				if(x>=90 && x<=110)
				i=0;
				else if(x>=290 && x<=310)
				i=1;
				else if(x>=490 && x<=510)
				i=2;
				else
				{
					update(stk,top);
					outtext("You have Entered at wrong Place try again after 3 sec..");
					delay(3000);
					continue;
				}

				if(temp==0)
				{
					if(top[i] != -1)
					{
						temp = stk[top[i]][i];
						--top[i];
						update(stk,top);
						sprintf(str,"successfully picked from tower %d",i+1);
						outtext(str);
						outtextxy(50,30,"Mouse is OverLoaded with a Disk");
						delay(3000);
					}
					else
					{
						update(stk,top);
						outtext("you have choosed an Empty Tower");
						delay(3000);
					}
				}
				else if(temp != 0)
				{
					if(top[i] == -1 || stk[top[i]][i]>temp)
					{
						++top[i];
						stk[top[i]][i]=temp;
						temp=0;
						update(stk,top);
						sprintf(str,"successfull transfered to tower %d",i+1);
						outtext(str);
						outtextxy(50,30,"Now Mouse Is Unloaded Reload it");
						delay(3000);
					}
					else
					{
						update(stk,top);
						outtext("Couldn't transfer && mouse is still overloaded");
						delay(3000);
					}
				}
			}
		}
		update(stk,top);
		outtext("Process Done!! ");
		outtext("Press Any key to Exit...");
		getch();
		closegraph();
		return 1;
	}
}

int initmouse()
{
	in.x.ax=0;
	int86(51,&in,&out);
	return (out.x.ax);
}
void showmouse()
{
	in.x.ax=1;
	int86(51,&in,&out);
}
void getmousepos(int *x,int *y,int *cl)
{
	in.x.ax=3;
	int86(51,&in,&out);
	*x = out.x.cx;
	*y=out.x.dx;
	*cl=out.x.bx;
}
void setmousepos(int x,int y)
{
	in.x.ax=4;
	in.x.cx=x;
	in.x.dx=y;
	int86(51,&in,&out);
}

void update(int *stk[],int top[])
{
	int i,j,x,y;
	char str[10];
	cleardevice();

	setcolor(RED);
	setfillstyle(SOLID_FILL,BLUE);
	line(0,400,getmaxx(),400);
	for(i=0;i<3;i++)
	{
		x=100+i*200;
		sprintf(str,"%d",i+1);
		outtextxy(x,150,str);
		for(j=0;j<=top[i];j++)
		{
			y=400-10*(j+1);
			fillellipse(x,y,stk[j][i],stk[j][i]/2);
		}
		setcolor(YELLOW);      //change line color
		setlinestyle(SOLID_LINE,0,3);   //change line style and color
		line(x,400-10*j,x,200);
		setlinestyle(SOLID_LINE,0,1);      //restore old line style
		setcolor(RED);                 //restore old color
	}
}

int button()
{
	int x,y,cl;
	int i,h;
	setcolor(RED);
	settextstyle(COMPLEX_FONT,HORIZ_DIR,4);
	outtext("Choose One Method..");
	setfillstyle(SOLID_FILL,WHITE);
	h=textheight("M")+50;
	bar(40,50,240,h);
	outtextxy(60,45,"COMPUTER");
	bar(300,50,500,h);
	outtextxy(330,45,"MANUAL");
	initmouse();
	showmouse();
	while(!kbhit())
	{
		getmousepos(&x,&y,&cl);
		if(cl==1 && y>=50 && y<=h)
		{
			if(x>=40 && x<=240)
			{
				i=1;
				break;
			}
			else if(x>=300 && x<=500)
			{
				i=2;
				break;
			}
		}
	}
	hidemouse();
	return i;
}
void hidemouse()
{
	in.x.ax=2;
	int86(51,&in,&out);
}
void towerHanoi(int n,int *stk[],int top[],int a,int b,int c)
{
	if(n==1)
	{
		top[c]++;
		stk[top[c]][c]=stk[top[a]][a];
		top[a]--;
		update(stk,top);
		delay(3000);
	}
	else
	{
		towerHanoi(n-1,stk,top,a,c,b);
		top[c]++;
		stk[top[c]][c]=stk[top[a]][a];
		top[a]--;
		update(stk,top);
		delay(3000);
		towerHanoi(n-1,stk,top,b,a,c);
	}
}